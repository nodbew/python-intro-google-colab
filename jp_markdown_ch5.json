{
  "[JP_CHAP5_TITLE_PH]": "# 第5章：関数",
  "[JP_CHAP5_INTRO_P1_PH]": "これまでの章で、私たちは様々な処理を行うコードを書いてきました。プログラムが大きくなってくると、同じような処理を何度も書いたり、特定のまとまった処理に名前を付けて管理したりしたくなります。そのような場合に役立つのが **関数 (Function)** です。関数を使うことで、コードの再利用性が高まり、プログラム全体の見通しが良くなります。",
  "[JP_SEC5_1_TITLE_PH]": "## 5.1 関数とは？",
  "[JP_SEC5_1_P1_PH]": "**関数**とは、特定のタスク（仕事）を実行するための一連の処理をまとめたもので、名前を付けて何度でも呼び出して使うことができるコードのブロックです。",
  "[JP_SEC5_1_MERITS_TITLE_PH]": "**関数のメリット：**",
  "[JP_SEC5_1_MERIT1_TITLE_PH]": "*   **再利用性：**",
  "[JP_SEC5_1_MERIT1_TEXT_PH]": "同じ処理を何度も書く必要がなくなり、一度定義した関数を必要な場所で呼び出すだけで済みます。これにより、コードの量が減り、タイプミスも防げます。",
  "[JP_SEC5_1_MERIT2_TITLE_PH]": "*   **モジュール性（部品化）：**",
  "[JP_SEC5_1_MERIT2_TEXT_PH]": "プログラムを小さな機能単位（関数）に分割することで、各部分が何をしているのか理解しやすくなります。大きなプログラムを小さな部品の組み合わせとして捉えることができます。",
  "[JP_SEC5_1_MERIT3_TITLE_PH]": "*   **可読性：**",
  "[JP_SEC5_1_MERIT3_TEXT_PH]": "関数に適切な名前を付けることで、その関数が何をするのかが一目で分かり、プログラム全体の流れが追いやすくなります。",
  "[JP_SEC5_1_MERIT4_TITLE_PH]": "*   **保守性：**",
  "[JP_SEC5_1_MERIT4_TEXT_PH]": "特定の処理に変更が必要になった場合、その関数の中だけを修正すれば済むため、修正箇所が限定され、バグの修正や機能改善が容易になります。",
  "[JP_SEC5_1_REALWORLD_TITLE_PH]": "**実世界の例：**",
  "[JP_SEC5_1_REALWORLD_P1_PH]": "日常生活で考えてみましょう。例えば、「コーヒーを淹れる」という一連の作業（豆を挽く、フィルターをセットする、お湯を沸かす、お湯を注ぐなど）は、一つの「関数」と見なすことができます。「コーヒーを淹れる」という名前でこの手順を覚えておけば、コーヒーが飲みたいときにいつでもこの「関数」を呼び出してコーヒーを淹れることができます。",
  "[JP_SEC5_1_REALWORLD_P2_PH]": "プログラミングにおける関数も、このような「決まった手順の処理のまとまり」に名前を付けたものと考えると分かりやすいでしょう。",
  "[JP_EX5_1_TITLE_PH]": "### 練習問題 5.1",
  "[JP_EX5_1_TEXT_PH]": "あなたが日常で行うことで、関数に例えられるような一連の決まった手順の作業を2つ挙げてください。それぞれの作業について、どのような手順が含まれるか簡単に説明してください。",
  "[JP_EX5_1_EXAMPLE_LABEL_PH]": "（例",
  "[JP_EX5_1_EXAMPLE_TEXT_PH]": "：朝食を作る手順 → 1. 材料を用意する、2. 目玉焼きを焼く、3. パンをトーストする、4. コーヒーを淹れる、5. 盛り付ける）",
  "[JP_AS_5_1_PROMPT_PH]": "ここに回答を記述してください。",
  "[JP_AS_5_1_WORK1_LABEL_PH]": "**作業1：**",
  "[JP_AS_5_1_STEP_LABEL_PH]": "*   手順：",
  "[JP_AS_5_1_WORK2_LABEL_PH]": "**作業2：**",
  "[JP_SOL_5_1_SUMMARY_PH]": "解答例 5.1",
  "[JP_SOL_5_1_CONTENT_PLACEHOLDER_PH]": "**作業1：洗濯をする**\n*   手順：\n    1.  洗濯物を洗濯槽に入れる。\n    2.  洗剤と柔軟剤を指定の場所に入れる。\n    3.  洗濯機のコースを選んでスタートボタンを押す。\n    4.  洗濯が終わったら洗濯物を取り出し、干す。\n\n**作業2：駅まで歩く**\n*   手順：\n    1.  家を出る準備をする（鍵、財布を持つなど）。\n    2.  玄関のドアを開けて外に出る。\n    3.  いつもの道を駅に向かって歩く。\n    4.  駅の改札に到着する。",
  "[JP_SEC5_2_TITLE_PH]": "## 5.2 関数の定義と呼び出し",
  "[JP_SEC5_2_EXPLANATION_P1_PH]": "Pythonで関数を使うには、まず関数を **定義 (Define)** し、その後に定義した関数を **呼び出す (Call)** という手順を踏みます。",
  "[JP_SEC5_2_DEF_TITLE_PH]": "**関数の定義：**",
  "[JP_SEC5_2_DEF_P1_PH]": "関数を定義するには `def` というキーワードを使います。",
  "[JP_SEC5_2_DEF_SYNTAX_TITLE_PH]": "**基本的な構文：**",
  "[JP_SEC5_2_DEF_KW_DEF_PH]": "関数を定義することを示すキーワード。",
  "[JP_SEC5_2_FUNCNAME_DEF_PH]": "あなたが自由に付けられる関数の名前です。変数名と同じ命名規則に従います（英字、数字、アンダースコアを使い、先頭は英字かアンダースコア。予約語は不可）。関数が何をするのか分かりやすい名前にしましょう。",
  "[JP_SEC5_2_PAREN_DEF_PH]": "関数名の後には必ず丸括弧 `()` を付けます。この括弧の中に、後述する「引数（ひきすう）」を指定することもできます。",
  "[JP_SEC5_2_COLON_DEF_PH]": "丸括弧の後には必ずコロンが必要です。",
  "[JP_SEC5_2_INDENT_TITLE_PH]": "**インデントされたコードブロック**",
  "[JP_SEC5_2_INDENT_DEF_PH]": "コロンの次の行からインデントされた部分が、この関数が実行する処理内容（関数の本体）です。",
  "[JP_SEC5_2_DEF_EXAMPLE_TITLE_PH]": "**例：挨拶を表示する関数の定義**",
  "[JP_SEC5_2_DEF_EXAMPLE_P1_PH]": "このコードは `say_hello` という名前の関数を定義しただけで、まだ何も実行されません。`print`文はまだ呼び出されていません。",
  "[JP_SEC5_2_CALL_TITLE_PH]": "**関数の呼び出し：**",
  "[JP_SEC5_2_CALL_P1_PH]": "定義した関数を実行するには、関数名の後に丸括弧 `()` を付けて記述します。",
  "[JP_SEC5_2_CALL_SYNTAX_TITLE_PH]": "**構文：**",
  "[JP_SEC5_2_CALL_EXAMPLE_TITLE_PH]": "**例：`say_hello` 関数の呼び出し**",
  "[JP_SEC5_2_CALL_EXAMPLE_P1_PH]": "これを実行すると、`say_hello` 関数の中の `print` 文が実行され、コンソールにメッセージが表示されます。",
  "[JP_EX5_2_TITLE_PH]": "### 練習問題 5.2",
  "[JP_EX5_2_TEXT_PH]": "「今日の天気は晴れです。」と表示する `display_weather` という名前の関数を定義し、その関数を定義した後に呼び出して、メッセージが表示されることを確認してください。",
  "[JP_SEC5_3_TITLE_PH]": "## 5.3 引数 (Arguments/Parameters)",
  "[JP_SEC5_3_EXPLANATION_CONTENT_PH]": "関数をより便利にするために、関数を呼び出す際に情報を渡すことができます。この渡される情報を **引数 (Argument)** といいます。関数定義側でこの引数を受け取るために用意する変数を **仮引数 (Parameter)** と呼びます。\n\n**引数を持つ関数の定義：**\n仮引数は、関数定義の丸括弧 `()` の中に記述します。複数ある場合はカンマ `,` で区切ります。\n\n**構文：**\n```python\ndef 関数名(仮引数1, 仮引数2, ...):\n    # 仮引数を使った処理\n    処理1\n    # ...\n```\n\n**例：名前を受け取って挨拶する関数**\n```python\ndef greet_by_name(name): # 'name' が仮引数\n    print(f\"{name}さん、こんにちは！\")\n\ngreet_by_name(\"佐藤\")   # \"佐藤\" が実引数として 'name' に渡される\ngreet_by_name(\"鈴木\")   # \"鈴木\" が実引数として 'name' に渡される\n```\n出力：\n```text\n佐藤さん、こんにちは！\n鈴木さん、こんにちは！\n```\nこのように、引数を使うことで、同じ関数でも渡す値によって動作を変化させることができます。\n\n**複数の引数：**\n```python\ndef add(a, b): # a と b が仮引数\n    result = a + b\n    print(f\"{a} + {b} = {result}\")\n\nadd(5, 3)      # 5がaに、3がbに渡される\nadd(100, 200)\n```\n\n**デフォルト引数値：**\n仮引数にデフォルトの値（初期値）を設定することができます。関数呼び出し時に対応する引数が省略された場合、このデフォルト値が使われます。\n\n**構文：**\n`def 関数名(仮引数1, 仮引数2=デフォルト値2, ...):`\n\n**例：**\n```python\ndef show_info(name, age=20): # ageのデフォルト値を20に設定\n    print(f\"名前： {name}, 年齢： {age}\")\n\nshow_info(\"田中\", 30) # ageには30が渡される -> 名前： 田中, 年齢： 30\nshow_info(\"山本\")    # ageは省略されたのでデフォルト値20が使われる -> 名前： 山本, 年齢： 20\n```\nデフォルト引数値を持つ仮引数は、持たない仮引数の後に記述する必要があります。",
  "[JP_EX5_3_TITLE_PH]": "### 練習問題 5.3",
  "[JP_EX5_3_EXERCISE_CONTENT_PH]": "1.  `item_name`（品名）と `price`（価格）の2つの引数を受け取り、「[item_name]の価格は[price]円です。」と表示する関数 `display_item_price` を定義してください。\n2.  この関数を、品名 \"リンゴ\", 価格 150 で呼び出してください。\n3.  次に、`display_item_price` 関数を改良し、`price` 引数にデフォルト値として `100` を設定してください。\n4.  品名 \"バナナ\"（価格はデフォルト値を使用）で呼び出し、品名 \"オレンジ\", 価格 120 で呼び出してみてください。",
  "[JP_SEC5_4_TITLE_PH]": "## 5.4 `return`文（返り値）",
  "[JP_SEC5_4_EXPLANATION_CONTENT_PH]": "関数は、処理を実行するだけでなく、その結果（値）を呼び出し元に返すことができます。このために使われるのが `return` 文です。関数が値を返すことを「返り値（かえりち）がある」や「値をリターンする」などといいます。\n\n**`return`文の構文：**\n```python\ndef 関数名(仮引数...):\n    # 何らかの処理\n    計算結果 = ...\n    return 計算結果  # この値を関数の呼び出し元に返す\n```\n*   `return`：Pythonのキーワード。\n*   `計算結果`：呼び出し元に返したい値や式。\n\n関数内で `return` 文が実行されると、関数はその時点で終了し、指定された値が呼び出し元に渡されます。`return` 文の後に処理があっても実行されません。\n`return` 文で何も値を指定しない場合（または `return` 文自体がない場合）、関数は特別な値 `None` を返します（`None` は「何もない」ことを示す値です）。\n\n**例：2つの数値を足し算して結果を返す関数**\n```python\ndef sum_two_numbers(a, b):\n    total = a + b\n    return total # 計算結果 total を返す\n\n# 関数の呼び出しと返り値の利用\nresult1 = sum_two_numbers(10, 5) # sum_two_numbersの返り値(15)がresult1に代入される\nprint(f\"10 + 5 = {result1}\")     # 出力: 10 + 5 = 15\n\nresult2 = sum_two_numbers(100, -20)\nprint(f\"100 + (-20) = {result2}\") # 出力: 100 + (-20) = 80\n\n# 返り値を直接使うこともできる\nprint(f\"直接使用： {sum_two_numbers(1, 2)}\") # 出力: 直接使用： 3\n```\n\n**複数の値を返す：**\n`return` 文でカンマ `,` を使って複数の値を指定すると、それらの値はタプルとしてまとめて返されます。\n\n```python\ndef get_point():\n    x = 10\n    y = 20\n    return x, y # xとyをタプル (10, 20) として返す\n\nmy_point = get_point()\nprint(my_point)        # 出力: (10, 20)\nprint(type(my_point))  # 出力: <class 'tuple'>\n\n# タプルはアンパックして受け取れる\ncoord_x, coord_y = get_point()\nprint(f\"X座標： {coord_x}, Y座標： {coord_y}\") # 出力: X座標： 10, Y座標： 20\n```\n返り値を使うことで、関数の計算結果を他の処理で活用できるようになり、プログラムの柔軟性が大きく向上します。",
  "[JP_EX5_4_TITLE_PH]": "### 練習問題 5.4",
  "[JP_EX5_4_EXERCISE_CONTENT_PH]": "1.  長方形の幅 `width` と高さ `height` を引数として受け取り、その面積を計算して返す関数 `calculate_rectangle_area(width, height)` を定義してください。\n2.  幅が5、高さが3の長方形の面積をこの関数を使って計算し、結果を変数 `area1` に格納して表示してください。\n3.  幅が10、高さが7の長方形の面積を計算し、結果を変数 `area2` に格納して表示してください。",
  "[JP_SEC5_5_TITLE_PH]": "## 5.5 変数のスコープ",
  "[JP_SEC5_5_EXPLANATION_CONTENT_PH]": "**スコープ (Scope)** とは、プログラム内の変数が参照（アクセス）可能な範囲のことです。Pythonには主に2種類のスコープがあります。\n\n1.  **ローカルスコープ (Local Scope)：**\n    *   関数の中で定義された変数は、その関数の中でのみ有効です。これをローカル変数といいます。\n    *   関数の外からローカル変数を参照しようとするとエラーになります。\n    *   関数が終了すると、そのローカル変数は通常破棄されます。\n\n2.  **グローバルスコープ (Global Scope)：**\n    *   関数の外（プログラムの最上位レベル）で定義された変数は、プログラムのどこからでも参照可能です。これをグローバル変数といいます。\n\n**例：**\n```python\nglobal_var = \"私はグローバル変数です\" # グローバルスコープで定義\n\ndef my_function():\n    local_var = \"私はローカル変数です\" # my_functionのローカルスコープで定義\n    print(f\"関数内からローカル変数を表示： {local_var}\")\n    print(f\"関数内からグローバル変数を表示： {global_var}\") # グローバル変数は関数内から参照可能\n\nmy_function() # 関数を呼び出し\n\nprint(f\"関数の外からグローバル変数を表示： {global_var}\")\n# print(f\"関数の外からローカル変数を表示： {local_var}\") # この行はエラーになります (NameError)\n                                                            # local_var は my_function の中だけで有効だからです。\n```\n\n**なぜスコープが重要か？**\n*   **名前の衝突を避ける：** 異なる関数内で同じ名前のローカル変数を使っても、互いに影響しません。これにより、大規模なプログラムでも変数名を管理しやすくなります。\n*   **意図しない変更を防ぐ：** 変数の有効範囲を限定することで、プログラムの特定の部分が他の部分に予期せぬ影響を与えるのを防ぎます。\n\n**注意点：**\n関数内でグローバル変数と同じ名前の変数に値を代入すると、Pythonはその名前で新しいローカル変数を作成します（グローバル変数が上書きされるわけではありません）。もし関数内でグローバル変数の値を変更したい場合は `global` キーワードを使う必要がありますが、これは多用するとプログラムが複雑になりやすいため、初心者のうちはグローバル変数の変更は避けるのが無難です。関数は引数でデータを受け取り、`return` で結果を返す設計を基本としましょう。",
  "[JP_EX5_5_TITLE_PH]": "### 練習問題 5.5",
  "[JP_EX5_5_EXERCISE_CONTENT_PH]": "1.  グローバル変数として `x = 10` を定義します。\n2.  `print_variables` という関数を定義します。\n    *   この関数の中で、ローカル変数として `y = 20` を定義します。\n    *   関数の中で、`x` の値と `y` の値をそれぞれ表示してください。\n3.  `print_variables` 関数を呼び出してください。\n4.  関数の呼び出し後、グローバル変数 `x` の値を表示してください。\n5.  （コメントアウトして試す）関数の呼び出し後、ローカル変数 `y` の値を表示しようとするとどうなるか確認してください。",
  "[JP_SEC5_6_TITLE_PH]": "## 5.6 Docstring(ドキュメンテーション文字列)",
  "[JP_SEC5_6_EXPLANATION_CONTENT_ASCII_PH]": "**Docstring (ドックストリング)** とは Documentation String の略です 関数 モジュール クラスなどの定義の直下に書かれ その機能や使い方を説明します トリプルクォート `'''` または `\"\"\"` で囲んで記述します\n\n**Docstringの目的：**\n*   **ドキュメント化：** 関数が何をするのかを説明します。\n*   **`help()`関数での表示：** `help(関数名)` でDocstringを確認できます。\n\n**書き方の例：**\n関数の最初の行に `'''ここに説明を書きます'''` のように記述します。\n```python\ndef simple_greet():\n    '''簡単な挨拶をする関数です。'''\n    print(\"こんにちは！\")\n\nhelp(simple_greet) # これで上記のDocstringが表示されます。\n```\nDocstringは、1行の簡潔な説明で始めるのが一般的で、必要に応じて複数行で詳細な説明、引数 (Args)、返り値 (Returns) などを記述します。まずは「その関数が何をするのか」を明確に記述することを心がけましょう。\n良いDocstringを書くことは、他の人にとっても自分にとっても、コードをより使いやすく、保守しやすくするための重要な習慣です。",
  "[JP_EX5_6_TITLE_PH]": "### 練習問題 5.6",
  "[JP_EX5_6_EXERCISE_CONTENT_PH]": "練習問題 5.4 で作成した長方形の面積を計算する関数 `calculate_rectangle_area(width, height)` に、適切なDocstringを追加してください。Docstringには、以下の情報を含めるようにしましょう。\n- 関数の簡単な説明（例：長方形の面積を計算します。）\n- 引数についての説明（`width` と `height` が何を表すか、期待される型など）\n- 返り値についての説明（何を返すか、その型など）\n\nDocstringを追加した後、`help(calculate_rectangle_area)` を実行して、Docstringが正しく表示されることを確認してください。"
}
