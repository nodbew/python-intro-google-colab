{
  "[JP_CHAP7_TITLE_PH]": "# 第7章：ファイルI/O (ファイル入出力)",
  "[JP_CHAP7_INTRO_P1_PH]": "プログラムを実行している間、作成した変数やデータはメモリ上に一時的に保存されます。しかし、プログラムが終了するとこれらのデータは失われてしまいます。データを永続的に保存し、後で再利用したり、他のプログラムと共有したりするためには、ファイルへの保存が必要になります。",
  "[JP_CHAP7_INTRO_P2_PH]": "ファイルI/O（アイオー、Input/Outputの略）とは、プログラムがファイルからデータを読み込んだり（入力）、ファイルへデータを書き込んだり（出力）する操作のことです。この章では、Pythonでテキストファイルを扱う基本的な方法を学びます。",
  "[JP_SEC7_1_TITLE_PH]": "## 7.1 ファイルの読み込み (Reading from files)",
  "[JP_SEC7_1_EXPLAIN_P1_PH]": "ファイルからデータを読み込むには、まず対象のファイルを「開く（open）」必要があります。Pythonでは組み込みの `open()` 関数を使います。",
  "[JP_SEC7_1_EXPLAIN_P2_PH]": "`open()` 関数の基本的な構文は `open(ファイル名, モード, encoding=文字コード)` です。\n*   **ファイル名:** 読み込みたいファイルの名前（パスを含むこともあります）。\n*   **モード:** ファイルをどのような目的で開くかを指定します。読み込みの場合は `'r'` (read) を指定します。\n*   **encoding:** ファイルの文字コードを指定します。日本語のテキストファイルを扱う場合は `'utf-8'` を指定するのが一般的です。これを指定しないと、環境によっては文字化けが発生することがあります。",
  "[JP_SEC7_1_MODE_R_PH]": "読み込みモード。ファイルが存在しない場合はエラーになります。",
  "[JP_SEC7_1_EXPLAIN_P3_PH]": "ファイルを開いた後、ファイルオブジェクトのメソッドを使って内容を読み込みます。主な読み込みメソッドには以下があります。",
  "[JP_SEC7_1_METHOD_READ_PH]": "`read()`: ファイルの内容全体を一つの文字列として読み込みます。",
  "[JP_SEC7_1_METHOD_READLINE_PH]": "`readline()`: ファイルから1行だけを読み込み、文字列として返します。ファイルポインタ（読み込み位置）が次の行に移動します。",
  "[JP_SEC7_1_METHOD_READLINES_PH]": "`readlines()`: ファイルの内容を全て読み込み、各行を要素とするリストとして返します。各行の末尾には改行文字 `\\n` が含まれることが多いです。",
  "[JP_SEC7_1_EXPLAIN_P4_PH]": "ファイルを使い終わったら、必ず `close()` メソッドでファイルを「閉じる」必要があります。しかし、より安全で推奨されるのは `with` 文を使う方法です（詳しくは後述します）。`with` 文を使うと、ブロックを抜ける際に自動的にファイルが閉じられます。",
  "[JP_SEC7_1_EXPLAIN_P5_PH]": "# 何かテキストが書かれたファイルを作成しておいてください。",
  "[JP_EX7_1_TITLE_PH]": "### 練習問題 7.1",
  "[JP_EX7_1_TEXT_P1_PH]": "カレントディレクトリ（このノートブックファイルがある場所と同じ場所）に `poem.txt` という名前のファイルを作成し、以下の内容を書き込んでください（Colabの左側のファイルブラウザから新規ファイルを作成してコピペするのが簡単です）。",
  "[JP_EX7_1_SAMPLE_TEXT_LINE1_PH]": "ふるいけや",
  "[JP_EX7_1_SAMPLE_TEXT_LINE2_PH]": "かわずとびこむ",
  "[JP_EX7_1_SAMPLE_TEXT_LINE3_PH]": "みずのおと",
  "[JP_EX7_1_TEXT_P2_PH]": "次に、この `poem.txt` をPythonで読み込み、ファイルの内容全体を `print()` 関数で表示するプログラムを作成してください。ファイルエンコーディングは `'utf-8'` を使用し、`with` 文を使ってファイルを扱ってください。",
  "[JP_CHECK_CODE_TITLE_EX7_1_PH]": "練習問題7.1の回答をチェック",
  "[JP_CHECK_CODE_7_1_MANUAL_PROMPT_PH]": "read_sample_file_exercise() 関数を実行する前に、poem.txt を作成し内容を記述してください。その後、関数を実行してファイル内容が正しく表示されるか確認してください。",
  "[JP_SEC7_2_TITLE_PH]": "## 7.2 ファイルへの書き込み (Writing to files)",
  "[JP_SEC7_2_EXPLAIN_P1_PH]": "ファイルへデータを書き込む場合も、まず `open()` 関数でファイルを開きます。書き込み用の主なモードには以下があります。",
  "[JP_SEC7_2_MODE_W_PH]": "`'w'`: 書き込みモード。ファイルが存在しない場合は新規作成されます。ファイルが既に存在する場合は、**既存の内容は全て上書き消去される**ので注意が必要です。",
  "[JP_SEC7_2_MODE_A_PH]": "`'a'`: 追記モード。ファイルが存在しない場合は新規作成されます。ファイルが既に存在する場合は、既存の内容の末尾に新しいデータが追加されます。",
  "[JP_SEC7_2_EXPLAIN_P2_PH]": "ファイルを開いた後、ファイルオブジェクトのメソッドを使ってデータを書き込みます。",
  "[JP_SEC7_2_METHOD_WRITE_PH]": "`write()`: 指定した文字列をファイルに書き込みます。改行をしたい場合は、文字列の中に改行文字 `\\n` を含める必要があります。",
  "[JP_SEC7_2_METHOD_WRITELINES_PH]": "`writelines()`: 文字列のリストを受け取り、各文字列をファイルに順番に書き込みます。`write()` と異なり、自動的には改行文字を挿入しないため、必要であれば各文字列の末尾に `\\n` を付けておく必要があります。",
  "[JP_SEC7_2_EXPLAIN_P3_PH]": "書き込みの場合も、`with` 文を使うことが推奨されます。",
  "[JP_EX7_2_TITLE_PH]": "### 練習問題 7.2",
  "[JP_EX7_2_STEP1_PH]": "1.  `my_diary.txt` という名前のファイルに、以下の2行を新規書き込み（モード `'w'`）してください。",
  "[JP_EX7_2_GREETING_LINE1_PH]": "今日の日記：",
  "[JP_EX7_2_GREETING_LINE2_PH]": "Pythonの勉強は楽しい。",
  "[JP_EX7_2_STEP2_PH]": "2.  次に、同じ `my_diary.txt` ファイルに、「特にファイル操作が面白い。」という行を追記（モード `'a'`）してください。",
  "[JP_EX7_2_STEP3_PH]": "3.  最後に、`my_diary.txt` の内容を読み込んで表示し、正しく書き込みと追記が行われたか確認してください。",
  "[JP_CHECK_CODE_TITLE_EX7_2_PH]": "練習問題7.2の回答をチェック",
  "[JP_CHECK_CODE_7_2_MANUAL_PROMPT_PH]": "write_and_append_to_file_exercise() 関数を実行し、my_diary.txt の内容が期待通り（最初の2行＋追記した1行）になっているか確認してください。",
  "[JP_SEC7_3_TITLE_PH]": "## 7.3 `with`文の利点 (Advantages of the `with` statement)",
  "[JP_SEC7_3_EXPLAIN_P1_PH]": "前のセクションでも触れましたが、ファイルのオープンには `with` 文を使うのがPythonでは一般的で、強く推奨されています。",
  "[JP_SEC7_3_EXPLAIN_P2_PH]": "`with open(...) as ファイルオブジェクト変数:` のように書くと、`with` 文のブロック（インデントされた範囲）が終了する際に、開いたファイルが自動的に `close()` されます。これにより、プログラマーが明示的に `close()` を呼び出し忘れる心配がなくなります。",
  "[JP_SEC7_3_EXPLAIN_P3_PH]": "もし `with` 文を使わずに `try...finally` 構文で同様のことをしようとすると、コードが少し冗長になります。`with` 文は、リソース管理を簡潔かつ安全に行うための優れた構文です。ファイル操作以外にも、データベース接続やネットワーク接続など、開始と終了の処理が必要な様々な場面で利用されます。",
  "[JP_EX7_3_TITLE_PH]": "### 練習問題 7.3",
  "[JP_EX7_3_TEXT_P1_PH]": "ファイル操作において `with` 文を使う主な利点は何でしょうか？あなたの言葉で説明してください。",
  "[JP_EX7_3_TEXT_P2_PH]": "また、もし `with` 文を使わなかった場合に発生しうる問題点を1つ挙げてください。",
  "[JP_AS_7_3_PROMPT_PH]": "ここに回答を記述してください。",
  "[JP_AS_7_3_WITHOUT_WITH_TITLE_PH]": "（参考：with文を使わない場合のファイル書き込み例）",
  "[JP_AS_7_3_WITH_WITH_TITLE_PH]": "（参考：with文を使った場合のファイル書き込み例）",
  "[JP_AS_7_3_EXPLANATION_TITLE_PH]": "**with文の利点と、使わない場合の問題点：**",
  "[JP_AS_7_3_EXPLANATION_PROMPT_PH]": "(ここに説明を記述)",
  "[JP_CHECK_CODE_TITLE_EX7_3_PH]": "練習問題7.3の回答をチェック",
  "[JP_CHECK_CODE_7_3_MANUAL_PROMPT_PH]": "あなたの記述した利点と問題点を確認してください。模範解答も参考にしましょう。"
}
